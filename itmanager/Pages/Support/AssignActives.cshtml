@page "{id:int}"
@using itmanager.Class
@using System.IO
@model itmanager.Pages.Support.AssignActivesModel

@{
    ViewData["Title"] = "Asignación de Activos"; 
}

<partial name="_Breadcrumb"/>

<p style="margin-top:10px"> <button class="btn btnew btn-warning" id="btn-show-scanner" onclick="searchqr()"> Buscar activo desde QRCode</button></p>
<iframe src="~/prueba.html" style=" width="500px" height="0px" id="iframesearchqr" scrolling="yes"></iframe>

<div id="reader" width="600px"></div>

<div class="ibox-content">
	<div class="col-lg-12">
        <div class="">
            <table id="datagrid" class="display">
                <thead>
                    <tr>
                        <th width="100%">
                            Modelo
                        </th>
                        <th>
                            Serie
                        </th>
                        <th>
                            Estado
                        </th>
                        <th>
                            Imagen #1
                        </th>
@*                        <th>
                            @Html.DisplayNameFor(model => model.ActActivo[0].ActImagen2)
                        </th>*@
                        <th nowrap>
                            Tipo de Activo
                        </th>
                        <th>
                            Fabricante
                        </th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
            @foreach (var item in Model.ActActivo) {
                    <tr>
                        <td>
                            <p class="pgridt">@Html.DisplayFor(modelItem => item.ActModelo)</p>
                            <p class="pgridd">@Html.DisplayFor(modelItem => item.ActObservaciones)</p>
                            <p class="pgridt activeuid"><span class="badge bg-secondary">@Html.DisplayFor(modelItem => item.ActUid)</span></p>
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.ActSerie)
                        </td>
                        <td>
                                @{ string css = UtilitiesHandler.StateCSS(item.ActEstado); }
                                 <span class="badge @css">@Html.DisplayFor(modelItem => item.ActEstado)</span>
                        </td>
                @{
                    BreadcrumbInfo Breadcrumb = (BreadcrumbInfo)ViewData["Breadcrumb"];
                    AppConfig appConfig = Breadcrumb.Config;

                    string path1 = UtilitiesHandler.ImgRoute(appConfig.ImagePathActives + item.ActImagen1, TypeRouteImg.ReadSep);
                    string path2 = UtilitiesHandler.ImgRoute(appConfig.ImagePathActives + item.ActImagen2, TypeRouteImg.ReadSep);
                    string noimg = UtilitiesHandler.ImgRoute(appConfig.ImagePathNoImg, TypeRouteImg.ReadSep);
                }
                        <td>
                            <img id="imgprofile" src="@path1" onerror="this.onerror=null;this.src='@noimg';"/>
                        </td>
@*                        <td>
                            <img id="imgprofile" src="@path2" onerror="this.onerror=null;this.src='@noimg';"/>
                        </td> *@
                        <td>
                            @Html.DisplayFor(modelItem => item.Tac.TacNombre)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Tfa.TfaNombre)
                        </td>
                        <td nowrap>
                            <form method="post" id="formassign_@item.ActId" name="formactive">
                            <input type="hidden" name="idactive" value="@item.ActId">
                            @if (item.ActEstado == "almacenado")
                            {
                                <input type="button" onclick="submitdata('formassign_@item.ActId')" value="Asignar Activo" class="btn btn-success" />
                            } else
                            {
                                <input type="button" disabled value="Asignar Activo" class="btn btn-secondary" />
                            } 
                             </form>
                        </td>
                    </tr>
            }
                </tbody>
                            
            </table>
        </div>
    </div>
</div>

<script src="/js/html5-qrcode.min.js"></script>
<script>

function submitdata(formid) {

    var form = $('#' + formid);
        
    form.click(function(event) {
        event.preventDefault();
        Swal.fire({ title: 'Estas seguro ?', text: "Desea asignar el activo !", icon: 'warning', showCancelButton: true, confirmButtonColor: '#3085d6', cancelButtonColor: '#d33', confirmButtonText: 'Si, asignalo!' }).then((result) => {
            if (result.isConfirmed) {
                form.submit();
            }
        })
    })
}


function searchqr() {

    const html5QrCode = new Html5Qrcode("reader");
    const qrCodeSuccessCallback = (decodedText, decodedResult) => {

       const info = decodedText.split("|");
       $('#datagrid').DataTable().search(info[0]).draw();

        html5QrCode.stop().then((ignore) => {
          // QR Code scanning is stopped.
        }).catch((err) => {
          // Stop failed, handle it.
        });
    };

    const config = { fps: 10, qrbox: { width: 500, height: 500 } };

    // If you want to prefer front camera
    html5QrCode.start({ facingMode: "environment" }, config, qrCodeSuccessCallback);

    // If you want to prefer back camera
    //html5QrCode.start({ facingMode: "environment" }, config, qrCodeSuccessCallback);
}

function onScanFailure(error) {
  console.warn(`Code scan error = ${error}`);
}

</script>